name: Main Workflow
on:
  pull_request:
    branches: [main]
  push:
    branches:
      - main
env:
  TF_VAR_repo_name: ${{ github.server_url }}/${{ github.repository }}

jobs:
  check_branch_status:
    name: Check Branch Status
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        if: ${{ github.ref != 'refs/heads/main' && github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository }}
        uses: actions/checkout@v4
      - name: Check branch status
        if: ${{ github.ref != 'refs/heads/main' && github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name }}
        shell: bash
        run: |
          git fetch origin main
          git fetch origin '${{ github.head_ref}}'
          if [[ "$(git rev-list --count 'origin/${{ github.head_ref }}..origin/main')" != "0" ]]
          then
            echo "This branch is not up to date with main." 
            exit 1
          else
            echo "Branch up to date with main. Continuing..."
          fi
  changes:
    name: Check Changes
    needs: check_branch_status
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.changes }}
      terraform: ${{ steps.terraform-changes.outputs.terraform }}
      global_change: ${{ steps.global-change.outputs.global }}
      all_projects: ${{ steps.matrix-all-projects.outputs.result }}
    permissions:
        contents: write
        pull-requests: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
          
      - name: Create filters
        run: |
            # Get all projects
            ls -d */* | grep -vE "src | src-lambda | resources" > projects.txt

            # Create files to dorny/paths-filter
            echo "terraform:" > tf_filters.yaml
            while read project; do
              echo $project: $project"/**" >> project_filters.yaml
              echo " - "$project"/**" >> tf_filters.yaml
            done <projects.txt

            echo "global:" > global_changes.yaml
            echo "- src-lambda/**" >> global_changes.yaml

            echo "Project Filters: "
            cat project_filters.yaml
            echo "###################"
            echo "TF Filters: "
            cat tf_filters.yaml

      - name: Check for global change
        uses: dorny/paths-filter@v3
        continue-on-error: true
        id: global-change
        with:
            filters: global_changes.yaml
            base: main

      - name: Get all project for matrix
        id: matrix-all-projects
        run: |
            projects=$(jq -R -s -c 'split("\n") | map(select(length > 0))' projects.txt)    
            echo "result=$projects" >> $GITHUB_OUTPUT
            echo "Projects to be matrixed if files changed: " echo $projects

      - uses: dorny/paths-filter@v3
        id: matrix
        with:
            filters: project_filters.yaml

      - uses: dorny/paths-filter@v3
        id: terraform-changes
        with:
            filters: tf_filters.yaml
  empty-matrix-eks:
    needs: changes
    name: Matrix No Changes
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.changes.outputs.terraform == 'false' && needs.changes.outputs.global_change != 'true'
    permissions:
      statuses: write
      checks: read
      contents: read
    steps:
     - name: set Workflow check status to success
       uses: actions/github-script@v7
       with:
         script: |
           github.rest.repos.createCommitStatus({
             owner: '${{github.repository_owner }}',
             repo: context.repo.repo,
             sha: '${{ github.event.pull_request.head.sha}}',
             state: 'success',
             context: 'EKS Pipeline'
           })

  plan-eks:
    # if: (needs.changes.outputs.terraform == 'true' || needs.changes.outputs.global_change == 'true') && github.ref != 'refs/heads/main'
    # needs: changes
    name: Terraform Plan ${{ matrix.region }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      id-token: write
    strategy:
      fail-fast: false
      matrix:
         region: ${{ fromJSON (needs. changes.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Add Github Keys
        run: |
          mkdir ~/.ssh/ && cd ~/.ssh/
          echo "${{ secrets.PIPELINE_SSH }} "> id_rsa 
          ssh-keyscan github.com > known_hosts
          chmod 400 id_rsa known_hosts  

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.x
    
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::637423353465:role/github-admin
          role-session-name: tf-eks
          aws-region: ap-south-1
    
      - name: Terraform Init
        working-directory: ${{ matrix.region }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ matrix. region }}
        run: |
          terraform plan -no-color -refresh=false -out=tmp.plan
          terraform show -no-color tmp.plan >${GITHUB_WORKSPACE}/terraform.plan 
        id: plan

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        continue-on-error: true
        with:
          github-token: $${{ secrets.GITHUB_TOKEN }}
          script: |
            const cleanRequest - '0 to change, 0 to destroy.'
            const fs = require('fs')
            const plan_file = fs.readFileSync('terraform.plan', 'utf8');
            const tf_plan = plan_file.lenght > 65000 ? plan_file.toString().substring(0, 65000) +" ..." : plan_file;
            const empty = "No changes. Your infrastructure matches the configuration.";

            commentBody = 'Region:\'${{matrix.region}}\'\n'

            if(tf_plan.includes(empty)){
              commentBody += 'No changes. Ypur infra matches the config.\n';
              }else{
              const plan_actions = tf_plan.split(
                "Terraform will perform the following actions:"
                )[1].trim();
                resource_change = plan_actions.match("Plan:.*")[0]
                
                commentBody += '<details><summary>Olan</summary>
                
                \'\'\' hcl
                ${plan_actions}
                \'\'\'
                </details>
                
                **${resource_changes}**\n';
                }
                commentBody += '*Region:* \'${{matrix.region}}\', *Workflow Run:* [${{ github.workflow}}](${context.serverUrl +"/${{ github.repository }}/actions/runs/" + context.runId})';

                const { data: comments} = await github.rest.issies.listComments({
                  issue_number: context.issue.number,
                  owner: context.repo.owner;
                  repo: context.repo.repo,
                });
                 
                const existingComment = comments.find((comment) => {
                return (
                  comment.user.type == "Bot" &&
                  comment.body.includes("Region:'${{ matrix.region}}'")
                 );
                });

                if (existingComment) {
                   github.rest.issue.updateComment({
                     owner: context.repo.owner,
                     repo: context.repo.repo,
                     comment_id: existingCommen.id,
                     bidy: commentBody,
                   });
                 } else{
                  github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: commentBody,
                  });
                }           

  complete-eks:
    needs: plan-eks
    name: Matrix complete
    runs-on: ubuntu-latest
    permissions:
      contents: read
      statuses: write
    steps:
      - name: Ser workflow check status to success
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: '${{github.repository_owner}}'
              repo: context.repo.repo,
              sha: '${{github.event.pull_request.head.sha}}',
              state: 'success',
              contexy: 'EKS Pipeline'
              })

  # apply-eks:
  #    if: (needs.changes.outputs.terraform == 'true' || needs.changes.outputs.global_change == 'ture')  && github.ref == 'refs/heads/main'
  #    needs: changes
  #    name: Terraform Apply ${{matrix.region}}
  #    runs-on: ubuntu-latest
  #    strategy:
  #      fail-fast: false
  #      matrix:
  #        region: ${{ needs.change.outputs.global_change == 'true' && fromJSON(needs.changes.outputs.all_projects) || fromJSON(needs.changes.outputs.matrix) }}
  #    permissions:
  #      contents: read
  #      id-token: write
  #    steps:
  #       - name: Checkout
  #         uses: actions/checkout@v4
        
  #       - name: Add Github Keys
  #         run: |
  #           mkdir ~/.ssh/&& cd ~/.ssh/
  #           echo "${{ secrets.PIPELINE_SSH}} > id_rsa
  #           ssh-keyscan github.com > known_hosts
  #           chmod 400 id_rsa known_hosts"

  #       - name: hashicorp/setup-terraform@v3
  #         with:
  #           teraform_version: 1.8.x

  #       - name: Configure AWS Credentials
  #         uses: aws-actions/configure-aws-credentials@v4
  #         with:
  #           role-to-assume: arn:aws:iam::637423353465:role/github-admin
  #           role-session-name: tf-eks
  #           aws-region: ap-south-1

  #       - name: Terraform init
  #         working-directory: ${{ matrix.region }}
  #         run: terraform init

  #       - name: Terraform Apply
  #         working-directory: ${{ matrix.region }}
  #         run: terraform apply -auto-approve

                
